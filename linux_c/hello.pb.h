// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hello.proto

#ifndef PROTOBUF_hello_2eproto__INCLUDED
#define PROTOBUF_hello_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace hello {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_hello_2eproto();
void protobuf_AssignDesc_hello_2eproto();
void protobuf_ShutdownFile_hello_2eproto();

class Hello;

// ===================================================================

class Hello : public ::google::protobuf::Message {
public:
    Hello();
    virtual ~Hello();

    Hello(const Hello& from);

    inline Hello& operator=(const Hello& from) {
        CopyFrom(from);
        return *this;
    }

    inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
        return _unknown_fields_;
    }

    inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
        return &_unknown_fields_;
    }

    static const ::google::protobuf::Descriptor* descriptor();
    static const Hello& default_instance();

    void Swap(Hello* other);

    // implements Message ----------------------------------------------

    Hello* New() const;
    void CopyFrom(const ::google::protobuf::Message& from);
    void MergeFrom(const ::google::protobuf::Message& from);
    void CopyFrom(const Hello& from);
    void MergeFrom(const Hello& from);
    void Clear();
    bool IsInitialized() const;

    int ByteSize() const;
    bool MergePartialFromCodedStream(
        ::google::protobuf::io::CodedInputStream* input);
    void SerializeWithCachedSizes(
        ::google::protobuf::io::CodedOutputStream* output) const;
    ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
    int GetCachedSize() const {
        return _cached_size_;
    }
private:
    void SharedCtor();
    void SharedDtor();
    void SetCachedSize(int size) const;
public:
    ::google::protobuf::Metadata GetMetadata() const;

    // nested types ----------------------------------------------------

    // accessors -------------------------------------------------------

    // required int32 id = 1;
    inline bool has_id() const;
    inline void clear_id();
    static const int kIdFieldNumber = 1;
    inline ::google::protobuf::int32 id() const;
    inline void set_id(::google::protobuf::int32 value);

    // required string name = 2;
    inline bool has_name() const;
    inline void clear_name();
    static const int kNameFieldNumber = 2;
    inline const ::std::string& name() const;
    inline void set_name(const ::std::string& value);
    inline void set_name(const char* value);
    inline void set_name(const char* value, size_t size);
    inline ::std::string* mutable_name();
    inline ::std::string* release_name();
    inline void set_allocated_name(::std::string* name);

    // optional string email = 3;
    inline bool has_email() const;
    inline void clear_email();
    static const int kEmailFieldNumber = 3;
    inline const ::std::string& email() const;
    inline void set_email(const ::std::string& value);
    inline void set_email(const char* value);
    inline void set_email(const char* value, size_t size);
    inline ::std::string* mutable_email();
    inline ::std::string* release_email();
    inline void set_allocated_email(::std::string* email);

    // @@protoc_insertion_point(class_scope:hello.Hello)
private:
    inline void set_has_id();
    inline void clear_has_id();
    inline void set_has_name();
    inline void clear_has_name();
    inline void set_has_email();
    inline void clear_has_email();

    ::google::protobuf::UnknownFieldSet _unknown_fields_;

    ::google::protobuf::uint32 _has_bits_[1];
    mutable int _cached_size_;
    ::std::string* name_;
    ::std::string* email_;
    ::google::protobuf::int32 id_;
    friend void  protobuf_AddDesc_hello_2eproto();
    friend void protobuf_AssignDesc_hello_2eproto();
    friend void protobuf_ShutdownFile_hello_2eproto();

    void InitAsDefaultInstance();
    static Hello* default_instance_;
};
// ===================================================================


// ===================================================================

// Hello

// required int32 id = 1;
inline bool Hello::has_id() const {
    return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Hello::set_has_id() {
    _has_bits_[0] |= 0x00000001u;
}
inline void Hello::clear_has_id() {
    _has_bits_[0] &= ~0x00000001u;
}
inline void Hello::clear_id() {
    id_ = 0;
    clear_has_id();
}
inline ::google::protobuf::int32 Hello::id() const {
    // @@protoc_insertion_point(field_get:hello.Hello.id)
    return id_;
}
inline void Hello::set_id(::google::protobuf::int32 value) {
    set_has_id();
    id_ = value;
    // @@protoc_insertion_point(field_set:hello.Hello.id)
}

// required string name = 2;
inline bool Hello::has_name() const {
    return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Hello::set_has_name() {
    _has_bits_[0] |= 0x00000002u;
}
inline void Hello::clear_has_name() {
    _has_bits_[0] &= ~0x00000002u;
}
inline void Hello::clear_name() {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
    }
    clear_has_name();
}
inline const ::std::string& Hello::name() const {
    // @@protoc_insertion_point(field_get:hello.Hello.name)
    return *name_;
}
inline void Hello::set_name(const ::std::string& value) {
    set_has_name();
    if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_ = new ::std::string;
    }
    name_->assign(value);
    // @@protoc_insertion_point(field_set:hello.Hello.name)
}
inline void Hello::set_name(const char* value) {
    set_has_name();
    if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_ = new ::std::string;
    }
    name_->assign(value);
    // @@protoc_insertion_point(field_set_char:hello.Hello.name)
}
inline void Hello::set_name(const char* value, size_t size) {
    set_has_name();
    if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_ = new ::std::string;
    }
    name_->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:hello.Hello.name)
}
inline ::std::string* Hello::mutable_name() {
    set_has_name();
    if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_ = new ::std::string;
    }
    // @@protoc_insertion_point(field_mutable:hello.Hello.name)
    return name_;
}
inline ::std::string* Hello::release_name() {
    clear_has_name();
    if (name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        return NULL;
    } else {
        ::std::string* temp = name_;
        name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        return temp;
    }
}
inline void Hello::set_allocated_name(::std::string* name) {
    if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        delete name_;
    }
    if (name) {
        set_has_name();
        name_ = name;
    } else {
        clear_has_name();
        name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    // @@protoc_insertion_point(field_set_allocated:hello.Hello.name)
}

// optional string email = 3;
inline bool Hello::has_email() const {
    return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Hello::set_has_email() {
    _has_bits_[0] |= 0x00000004u;
}
inline void Hello::clear_has_email() {
    _has_bits_[0] &= ~0x00000004u;
}
inline void Hello::clear_email() {
    if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_->clear();
    }
    clear_has_email();
}
inline const ::std::string& Hello::email() const {
    // @@protoc_insertion_point(field_get:hello.Hello.email)
    return *email_;
}
inline void Hello::set_email(const ::std::string& value) {
    set_has_email();
    if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_ = new ::std::string;
    }
    email_->assign(value);
    // @@protoc_insertion_point(field_set:hello.Hello.email)
}
inline void Hello::set_email(const char* value) {
    set_has_email();
    if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_ = new ::std::string;
    }
    email_->assign(value);
    // @@protoc_insertion_point(field_set_char:hello.Hello.email)
}
inline void Hello::set_email(const char* value, size_t size) {
    set_has_email();
    if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_ = new ::std::string;
    }
    email_->assign(reinterpret_cast<const char*>(value), size);
    // @@protoc_insertion_point(field_set_pointer:hello.Hello.email)
}
inline ::std::string* Hello::mutable_email() {
    set_has_email();
    if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        email_ = new ::std::string;
    }
    // @@protoc_insertion_point(field_mutable:hello.Hello.email)
    return email_;
}
inline ::std::string* Hello::release_email() {
    clear_has_email();
    if (email_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        return NULL;
    } else {
        ::std::string* temp = email_;
        email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
        return temp;
    }
}
inline void Hello::set_allocated_email(::std::string* email) {
    if (email_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        delete email_;
    }
    if (email) {
        set_has_email();
        email_ = email;
    } else {
        clear_has_email();
        email_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    // @@protoc_insertion_point(field_set_allocated:hello.Hello.email)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace hello

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_hello_2eproto__INCLUDED
